# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO: generated by windsurf, need verification

import logging
from timeit import default_timer
from typing import Any, List, Optional

from opentelemetry.genai.sdk.api import TelemetryClient
from opentelemetry.genai.sdk.data import Error
from opentelemetry.instrumentation.langchain.config import Config
from opentelemetry.instrumentation.langchain.utils import dont_throw, should_collect_content
from opentelemetry.semconv._incubating.attributes import gen_ai_attributes as GenAIAttributes
from opentelemetry.trace import SpanKind

logger = logging.getLogger(__name__)


def embed_query_wrapper(telemetry_client: TelemetryClient):
    """Wrap the embed_query method of Embeddings classes to trace it."""
    
    @dont_throw
    def traced_method(wrapped, instance, args, kwargs):
        if Config.is_instrumentation_suppressed():
            return wrapped(*args, **kwargs)
        
        # Extract the query text from args/kwargs
        query = args[0] if args else kwargs.get('text', '')
        
        # Get model information from the instance
        model_name = getattr(instance, 'model', None) or getattr(instance, 'model_name', None) or instance.__class__.__name__
        
        # Create span attributes
        span_attributes = {
            GenAIAttributes.GEN_AI_OPERATION_NAME: "embed_query",
            GenAIAttributes.GEN_AI_SYSTEM: "langchain",
            GenAIAttributes.GEN_AI_REQUEST_MODEL: model_name,
        }
        
        # Add query content if content collection is enabled
        if should_collect_content() and query:
            span_attributes["gen_ai.prompt"] = query
            
        span_name = f"embed_query {model_name}"
        
        # Get tracer from telemetry client
        tracer = getattr(telemetry_client, '_tracer', None)
        if not tracer:
            # Fallback to creating a tracer if not available
            from opentelemetry.trace import get_tracer
            tracer = get_tracer(__name__)
            
        with tracer.start_as_current_span(
            name=span_name,
            kind=SpanKind.CLIENT,
            attributes=span_attributes,
            end_on_exit=False,
        ) as span:
            start_time = default_timer()
            error_type = None
            result = None
            
            try:
                result = wrapped(*args, **kwargs)
                
                # Add response attributes
                if span.is_recording() and result:
                    if isinstance(result, list) and len(result) > 0:
                        span.set_attribute("gen_ai.embedding.dimension", len(result))
                    
                span.end()
                return result
                
            except Exception as error:
                error_type = type(error).__qualname__
                span.record_exception(error)
                span.set_status(status="ERROR", description=str(error))
                span.end()
                raise
            finally:
                duration = max((default_timer() - start_time), 0)
                
                # Record metrics if available
                if hasattr(telemetry_client, '_meter') and telemetry_client._meter:
                    common_attributes = {
                        GenAIAttributes.GEN_AI_OPERATION_NAME: "embed_query",
                        GenAIAttributes.GEN_AI_SYSTEM: "langchain", 
                        GenAIAttributes.GEN_AI_REQUEST_MODEL: model_name,
                    }
                    
                    if error_type:
                        common_attributes["error.type"] = error_type
                    
                    # Create histogram if it doesn't exist
                    if not hasattr(telemetry_client, '_embedding_duration_histogram'):
                        telemetry_client._embedding_duration_histogram = telemetry_client._meter.create_histogram(
                            name="gen_ai.client.operation.duration",
                            description="Duration of embedding operations",
                            unit="s",
                        )
                    
                    telemetry_client._embedding_duration_histogram.record(
                        duration,
                        attributes=common_attributes,
                    )
    
    return traced_method